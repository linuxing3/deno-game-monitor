// Copyright 2018-2020 Xing Wenju. 
// All rights reserved. MIT license.
// deno-lint-ignore-file
/*
|--------------------------------------------------------------------------
| Model: SalesInvoice
|--------------------------------------------------------------------------
|
| Model Class and Interface of salesInvoices
|
*/
import {
  DataTypes,
  Model
} from "https://deno.land/x/denodb/mod.ts";


export class SalesInvoice extends Model { 
  static table = "salesInvoices";
  static timestamps = true;
  
  static fields = {
    // fields list for ORM Maping
    id: { primaryKey: true, autoIncrement: true },
    title: DataTypes.STRING,
    series: DataTypes.STRING,
    customer: DataTypes.STRING,
    customerName: DataTypes.STRING,
    taxId: DataTypes.STRING,
    project: DataTypes.STRING,
    includePaymentPos: DataTypes.STRING,
    posProfile: DataTypes.STRING,
    offlinePosName: DataTypes.STRING,
    isReturnCreditNote: DataTypes.STRING,
    company: DataTypes.STRING,
    costCenter: DataTypes.STRING,
    date: DataTypes.STRING,
    postingTime: DataTypes.STRING,
    editPostingDateAndTime: DataTypes.STRING,
    paymentDueDate: DataTypes.STRING,
    amendedFrom: DataTypes.STRING,
    returns: DataTypes.STRING,
    returnAgainstSalesInvoice: DataTypes.STRING,
    updateBilledAmountInSalesOrder: DataTypes.STRING,
    customerPoDetails: DataTypes.STRING,
    customerSPurchaseOrder: DataTypes.STRING,
    customerSPurchaseOrderDate: DataTypes.STRING,
    addressAndContact: DataTypes.STRING,
    customerAddress: DataTypes.STRING,
    address: DataTypes.STRING,
    contactPerson: DataTypes.STRING,
    contact: DataTypes.STRING,
    mobileNo: DataTypes.STRING,
    contactEmail: DataTypes.STRING,
    territory: DataTypes.STRING,
    shippingAddressName: DataTypes.STRING,
    shippingAddress: DataTypes.STRING,
    companyAddressName: DataTypes.STRING,
    companyAddress: DataTypes.STRING,
    currencyAndPriceList: DataTypes.STRING,
    currency: DataTypes.STRING,
    exchangeRate: DataTypes.STRING,
    priceList: DataTypes.STRING,
    priceListCurrency: DataTypes.STRING,
    priceListExchangeRate: DataTypes.STRING,
    ignorePricingRule: DataTypes.STRING,
    setSourceWarehouse: DataTypes.STRING,
    updateStock: DataTypes.STRING,
    scanBarcode: DataTypes.STRING,
    items: DataTypes.STRING,
    packingList: DataTypes.STRING,
    packedItems: DataTypes.STRING,
    productBundleHelp: DataTypes.STRING,
    timeSheetList: DataTypes.STRING,
    timeSheets: DataTypes.STRING,
    totalBillingAmount: DataTypes.STRING,
    totalQuantity: DataTypes.STRING,
    totalCompanyCurrency: DataTypes.STRING,
    netTotalCompanyCurrency: DataTypes.STRING,
    total: DataTypes.STRING,
    netTotal: DataTypes.STRING,
    totalNetWeight: DataTypes.STRING,
    taxCategory: DataTypes.STRING,
    shippingRule: DataTypes.STRING,
    salesTaxesAndChargesTemplate: DataTypes.STRING,
    salesTaxesAndCharges: DataTypes.STRING,
    taxBreakup: DataTypes.STRING,
    taxesAndChargesCalculation: DataTypes.STRING,
    totalTaxesAndChargesCompanyCurrency: DataTypes.STRING,
    totalTaxesAndCharges: DataTypes.STRING,
    loyaltyPointsRedemption: DataTypes.STRING,
    loyaltyPoints: DataTypes.STRING,
    loyaltyAmount: DataTypes.STRING,
    redeemLoyaltyPoints: DataTypes.STRING,
    loyaltyProgram: DataTypes.STRING,
    redemptionAccount: DataTypes.STRING,
    redemptionCostCenter: DataTypes.STRING,
    additionalDiscount: DataTypes.STRING,
    applyAdditionalDiscountOn: DataTypes.STRING,
    additionalDiscountAmountCompanyCurrency: DataTypes.STRING,
    additionalDiscountPercentage: DataTypes.STRING,
    additionalDiscountAmount: DataTypes.STRING,
    grandTotalCompanyCurrency: DataTypes.STRING,
    roundingAdjustmentCompanyCurrency: DataTypes.STRING,
    roundedTotalCompanyCurrency: DataTypes.STRING,
    inWordsCompanyCurrency: DataTypes.STRING,
    grandTotal: DataTypes.STRING,
    roundingAdjustment: DataTypes.STRING,
    roundedTotal: DataTypes.STRING,
    inWords: DataTypes.STRING,
    totalAdvance: DataTypes.STRING,
    outstandingAmount: DataTypes.STRING,
    advancePayments: DataTypes.STRING,
    allocateAdvancesAutomaticallyFifo: DataTypes.STRING,
    getAdvancesReceived: DataTypes.STRING,
    advances: DataTypes.STRING,
    paymentTerms: DataTypes.STRING,
    paymentTermsTemplate: DataTypes.STRING,
    paymentSchedule: DataTypes.STRING,
    payments: DataTypes.STRING,
    cashBankAccount: DataTypes.STRING,
    salesInvoicePayment: DataTypes.STRING,
    paidAmountCompanyCurrency: DataTypes.STRING,
    paidAmount: DataTypes.STRING,
    baseChangeAmountCompanyCurrency: DataTypes.STRING,
    changeAmount: DataTypes.STRING,
    accountForChangeAmount: DataTypes.STRING,
    writeOff: DataTypes.STRING,
    writeOffAmount: DataTypes.STRING,
    writeOffAmountCompanyCurrency: DataTypes.STRING,
    writeOffOutstandingAmount: DataTypes.STRING,
    writeOffAccount: DataTypes.STRING,
    writeOffCostCenter: DataTypes.STRING,
    terms: DataTypes.STRING,
    termsAndConditionsDetails: DataTypes.STRING,
    printingSettings: DataTypes.STRING,
    letterHead: DataTypes.STRING,
    groupSameItems: DataTypes.STRING,
    printLanguage: DataTypes.STRING,
    printHeading: DataTypes.STRING,
    moreInformation: DataTypes.STRING,
    interCompanyInvoiceReference: DataTypes.STRING,
    customerGroup: DataTypes.STRING,
    campaign: DataTypes.STRING,
    status: DataTypes.STRING,
    source: DataTypes.STRING,
    accountingDetails: DataTypes.STRING,
    debitTo: DataTypes.STRING,
    partyAccountCurrency: DataTypes.STRING,
    isOpeningEntry: DataTypes.STRING,
    cFormApplicable: DataTypes.STRING,
    cFormNo: DataTypes.STRING,
    remarks: DataTypes.STRING,
    commission: DataTypes.STRING,
    salesPartner: DataTypes.STRING,
    commissionRate: DataTypes.STRING,
    totalCommission: DataTypes.STRING,
    salesTeam: DataTypes.STRING,
    salesTeam1: DataTypes.STRING,
    subscriptionSection: DataTypes.STRING,
    fromDate: DataTypes.STRING,
    toDate: DataTypes.STRING,
    autoRepeat: DataTypes.STRING,
    updateAutoRepeatReference: DataTypes.STRING,
    againstIncomeAccount: DataTypes.STRING,
    totalQty: DataTypes.STRING,
    
  };

}
